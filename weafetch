#!/usr/bin/env python3

from itertools import zip_longest
from json import loads
from os import environ
from re import sub

from src.artascii import art
from requests import get
import argparse


error_internet: str = "There seems to be a problem with internet."
error_json: str = "There seems to be a problem with decoding values, most likely due to API being down."


def parseConfig():
    path: str = f"/home/{environ.get('USER')}/.config/weafetch/config.json"
    with open(path, "r") as f:
        return loads(f.read())


def getWeather():
    currentWeather: dict = weatherRaw["weather"][0]["hourly"][7]

    windDirection = currentWeather["winddir16Point"]
    wind = "-"
    wind = "↑" if windDirection == "N" else wind
    wind = "→" if windDirection == "E" else wind
    wind = "←" if windDirection == "W" else wind
    wind = "↓" if windDirection == "S" else wind

    wind = "↖" if windDirection in ["WNW", "NW", "NNW"] else wind
    wind = "↗" if windDirection in ["NNE", "NE", "ENE"] else wind
    wind = "↙" if windDirection in ["WSW", "WS", "SSW"] else wind
    wind = "↘" if windDirection in ["SSE", "ES", "ESE"] else wind

    if conf["config"]["fahrenheit"]:
        feel_like_temp: int = currentWeather["FeelsLikeF"]
        real_temp: int = currentWeather["FeelsLikeF"]
        unit_temp: str = "°F"
    else:
        feel_like_temp: int = currentWeather["FeelsLikeC"]
        real_temp: int = currentWeather["tempC"]
        unit_temp: str = "°C"

    if conf["config"]["mph"]:
        wind_speed: int = currentWeather["windspeedMiles"]
        unit_wind: str = "mph"
    else:
        wind_speed: int = currentWeather["windspeedKmph"]
        unit_wind: str = "km/h"

    keywords: dict = {
        "wind_speed": wind_speed,
        "wind_direction": wind,
        "unit_wind": unit_wind,
        "real_temp": real_temp,
        "feel_like_temp": feel_like_temp,
        "unit_temp": unit_temp,
        "desc": currentWeather["weatherDesc"][0]["value"],
        "precip_chance": currentWeather["chanceofrain"],
        "precip": currentWeather["precipMM"],
    }

    global descriptors
    descriptors = []
    for x in conf["formatting"]["format"].split("%")[1:]:
        unformatted: str = conf["formatting"]["values"][x]
        for keyword in keywords.keys():
            if keyword in unformatted:
                unformatted = unformatted.replace(
                    "{" + keyword + "}", keywords[keyword]
                )

        descriptors.append(unformatted)


def getArt() -> str:
    desc = weatherRaw["weather"][0]["hourly"][7]["weatherDesc"][0]["value"].lower()

    got: list = []
    for de in desc.split():
        for ar in art.keys():
            if ar in de:
                got.append(art.get(ar, ""))

    if got == []:
        got.append(art.get("neutral"))

    return "\n".join(got).replace("\n", "", 1)


def parseArgs():
    parser = argparse.ArgumentParser(
        prog="wetfetch",
        description="see the weather in terminal, neofetch style",
    )

    parser.add_argument(
        "-c", "--city", type=str, help="get a weather report for a different city"
    )

    parser.add_argument(
        "-v", "--verbose", action="store_true", help="get a more verbose error output"
    )

    return parser.parse_args()


def main() -> None:
    art_full = getArt()
    removed_art = sub(r"\033\[[0-9;]*m", "", art_full)

    longest = max(len(line) for line in removed_art.splitlines())
    for art, desc in zip_longest(art_full.splitlines(), descriptors, fillvalue=""):
        print(
            f"{art.strip()} {' ' * (longest - len(art))}",
            end=" " * conf["config"]["common_space"],
        )
        print(desc)


if __name__ == "__main__":
    args = parseArgs()
    conf = parseConfig()
    city: str = args.city or ""

    # city = "" if city is None else city
    url: str = f"http://wttr.in/{city}?format=j1"

    verbose = lambda e: e if args.verbose else ""

    try: init = get(url, timeout=10)
    except Exception as e: raise SystemExit(f"{error_internet} {verbose(e)}")

    try: weatherRaw: dict = loads(init.text)
    except Exception as e: raise SystemExit(f"{error_json} {verbose(e)}")

    getWeather()

    print(
        f'{weatherRaw["nearest_area"][0]["areaName"][0]["value"]}, {weatherRaw["nearest_area"][0]["country"][0]["value"]}\n'
    )
    main()
    print()
