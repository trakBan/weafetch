#!/usr/bin/env python3

from itertools import zip_longest
from json import loads
from os import environ
from re import sub

from artascii import art
from requests import get
import argparse


error_internet: str = "There seems to be a problem with internet."
error_json: str = "There seems to be a problem with decoding values, most likely due to API being down."


def parseConfig():
    path: str = f"/home/{environ.get('USER')}/.config/weafetch/config.json"
    with open(path, "r") as f:
        return loads(f.read())


def getWeather():
    currentWeather: dict = weatherRaw["weather"][0]["hourly"][7]

    windDirection = currentWeather["winddir16Point"]
    wind = "-"
    wind = "↑" if windDirection == "N" else wind
    wind = "→" if windDirection == "E" else wind
    wind = "←" if windDirection == "W" else wind
    wind = "↓" if windDirection == "S" else wind

    wind = "↖" if windDirection in ["WNW", "NW", "NNW"] else wind
    wind = "↗" if windDirection in ["NNE", "NE", "ENE"] else wind
    wind = "↙" if windDirection in ["WSW", "WS", "SSW"] else wind
    wind = "↘" if windDirection in ["SSE", "ES", "ESE"] else wind

    if conf.get("fahrenheit"): temp: str = f'{currentWeather["FeelsLikeF"]}({currentWeather["tempF"]})°F'
    else: temp: str = f'{currentWeather["FeelsLikeC"]}({currentWeather["tempC"]})°C'

    if conf.get("mph"): win: str = f'{wind} {currentWeather["windspeedMiles"]}mph'
    else: win: str = f'{wind} {currentWeather["windspeedKmph"]}km/h'

    global descriptors
    descriptors = [
        currentWeather["weatherDesc"][0]["value"],
        temp,
        f'{currentWeather["chanceofrain"]}% | {currentWeather["precipMM"]} mm',
        win
    ]


def getArt() -> str:
    #desc = weatherRaw["weather"][0]["hourly"][7]["weatherDesc"][0]["value"].lower()
    desc = "Cloudy with thunder".lower()

    got: list = []
    for de in desc.split():
        for ar in art.keys():
            if ar in de:
                got.append(art.get(ar, ""))

    if got == []:
        got.append(art.get("neutral"))

    return "\n".join(got).replace("\n", "", 1)


def parseArgs():
    parser = argparse.ArgumentParser(
        prog="wetfetch",
        description="see the weather in terminal, neofetch style",
    )

    parser.add_argument(
        "-c", "--city", type=str, help="get a weather report for a different city"
    )

    parser.add_argument(
        "-v", "--verbose", action="store_true", help="get a more verbose error output"
    )

    return parser.parse_args()


def main() -> None:
    artFull: str = getArt()
    removedArt = re.sub("\\033\[[0-9;]*m", "", artFull)

    longest: int = max([len(x) for x in removedArt.splitlines()])
    for art, desc in zip_longest(artFull.splitlines(), descriptors, fillvalue=""):
        print(art.strip(), " " * (longest - len(art)), end=" " * conf.get("common_space", 3))
        print(desc)


if __name__ == "__main__":
    args = parseArgs()
    conf = parseConfig()
    city: str = args.city

    city = "" if city is None else city
    url: str = f"http://wttr.in/{city}?format=j1"

    verbose = lambda e: e if args.verbose else ""

    try: init = get(url, timeout=10)
    except Exception as e: raise SystemExit(f"{error_internet} {verbose(e)}")

    try: weatherRaw: dict = loads(init.text)
    except Exception as e: raise SystemExit(f"{error_json} {verbose(e)}")

    getWeather()

    print(
        f'{weatherRaw["nearest_area"][0]["areaName"][0]["value"]}, {weatherRaw["nearest_area"][0]["country"][0]["value"]}\n'
    )
    main()
    print()
