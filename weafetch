#!/usr/bin/env python3

from json import loads
from itertools import zip_longest

from requests import get
import argparse


error_internet: str = "There seems to be a problem with internet."
error_json: str = "There seems to be a problem with decoding values, most likely due to API being down."

common_space = 3

artAscii: dict = {
    "neutral": """
       .--.
    .-(    ).
    (___.__)__)""",
    "cloud": """
     .-.
    (   ). 
    (___(__)""",
    "rain": """
      ‘ ‘ ‘ ‘
    ‘ ‘ ‘ ‘""",
    "fog": """ 
    _ - _ - _ -
    _ - _ - _
    _ - _ - _ -""",
    "clear": """
    \   /
     .-.
    (.-.)
     `-’
    /   \\""",
    "partly": """
    \  /
    _ /"".-.
    \_(   ).
    /(___(__)
    """,
}


def getWeather():
    currentWeather: dict = weatherRaw["weather"][0]["hourly"][0]

    windDirection = weatherRaw["current_condition"][0]["winddir16Point"]
    wind = "-"
    wind = "↑" if windDirection == "N" else wind
    wind = "→" if windDirection == "E" else wind
    wind = "←" if windDirection == "W" else wind
    wind = "↓" if windDirection == "S" else wind

    wind = "↖" if windDirection in ["WNW", "NW", "NNW"] else wind
    wind = "↗" if windDirection in ["NNE", "NE", "ENE"] else wind
    wind = "↙" if windDirection in ["WSW", "WS", "SSW"] else wind
    wind = "↘" if windDirection in ["SSE", "ES", "ESE"] else wind

    global descriptors
    descriptors = [
        currentWeather["weatherDesc"][0]["value"],
        f'{currentWeather["FeelsLikeC"]}({currentWeather["tempC"]})°C',
        f'{currentWeather["chanceofrain"]}% | {currentWeather["precipMM"]} mm',
        f'{wind} {currentWeather["windspeedKmph"]}km/h',
    ]


def getArt(art: str = "") -> str:
    desc = weatherRaw["weather"][0]["hourly"][0]["weatherDesc"][0]["value"].lower()

    got: list[str | None] = []
    for de in desc.split():
        for ar in artAscii.keys():
            if ar in de:
                got.append(artAscii.get(ar, ""))

    if got == []:
        got.append(artAscii.get("neutral"))

    return "\n".join(got).replace("\n", "", 1)


def parseArgs():
    parser = argparse.ArgumentParser(
        prog="wetfetch",
        description="see the weather in terminal, neofetch style",
    )

    parser.add_argument(
        "-c", "--city", type=str, help="get a weather report for a different city"
    )

    parser.add_argument(
        "-v", "--verbose", action="store_true", help="get a more verbose error output"
    )

    return parser.parse_args()


def main() -> None:
    artFull: str = getArt()

    longest: int = max([len(x) for x in artFull.splitlines()])
    for art, desc in zip_longest(artFull.splitlines(), descriptors, fillvalue=""):
        print(art, " " * (longest - len(art)), end=" " * common_space)
        print(desc)


if __name__ == "__main__":
    args = parseArgs()
    city: str = args.city

    city = "" if city is None else city
    url: str = f"http://wttr.in/{city}?format=j1"

    verbose = lambda e: e if args.verbose else ""

    try: init = get(url, timeout=10)
    except Exception as e: raise SystemExit(f"{error_internet} {verbose(e)}")

    try: weatherRaw: dict = loads(init.text)
    except Exception as e: raise SystemExit(f"{error_json} {verbose(e)}")

    getWeather()

    print(
        f'{weatherRaw["nearest_area"][0]["areaName"][0]["value"]}, {weatherRaw["nearest_area"][0]["country"][0]["value"]}\n'
    )
    main()
    print()
